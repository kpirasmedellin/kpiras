generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                Int      @id @default(autoincrement())
  nombre            String
  telefono          String
  paginaWeb         String
  direccion         String
  ciudad            String
  departamento      String
  pais              String
  logoUrl           String
  tipoIdentificacion String
  numeroIdentificacion String
  users             User[]   @relation("CompanyUser")
}

model User {
  id                Int      @id @default(autoincrement())
  nombre            String
  correo            String   @unique
  contrasena        String
  rol               Rol
  estado            EstadoUser
  companyId         Int
  company           Company  @relation("CompanyUser", fields: [companyId], references: [id])
}

enum Rol {
  ADMINISTRADOR
  CAJERO
}

enum EstadoUser {
  ACTIVO
  DESACTIVADO
}

model Product {
  id          Int      @id @default(autoincrement())
  nombre      String
  urlImagen   String
  costo       Float
  precio      Float
  categoriaId Int
  estado      String   @default("ACTIVO")
  cantidad    Int      @default(0) // Cantidad inicial en inventario
  categoria   Category @relation(fields: [categoriaId], references: [id])
  KitchenProducts KitchenProducts[]
  InvoiceProducts InvoiceProducts[]
}

model Category {
  id          Int      @id @default(autoincrement())
  nombre      String
  estado      String   @default("ACTIVO")
  productos   Product[]
}

model Client {
  id          Int      @id @default(autoincrement())
  nombre      String
  telefono    String
  direccion   String
  kitchens    Kitchen[]
  invoices    Invoice[]
}

model Kitchen {
  id               Int              @id @default(autoincrement())
  clientId         Int?             // Relación opcional con cliente
  client           Client?          @relation(fields: [clientId], references: [id])
  observaciones    String?          // Campo opcional
  KitchenProducts  KitchenProducts[] // Relación con productos
}

model Invoice {
  id               Int              @id @default(autoincrement())
  clientId         Int?             // Relación opcional con cliente
  client           Client?          @relation(fields: [clientId], references: [id])
  descuento        Float?           // Descuento opcional
  total            Float            // Total de la factura
  fecha            DateTime         @default(now())
  estado           EstadoFactura    // Estado de la factura
  observaciones    String?          // Campo opcional
  turnoId          Int?             // Relación opcional con turno
  turno            Turno?           @relation(fields: [turnoId], references: [id])
  InvoiceProducts  InvoiceProducts[] // Relación con productos
}

model KitchenProducts {
  id               Int       @id @default(autoincrement())
  kitchenId        Int
  productId        Int
  cantidad         Int       @default(1) // Cantidad solicitada
  costo            Float     // Costo unitario
  precio           Float     // Precio unitario
  kitchen          Kitchen   @relation(fields: [kitchenId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
}

model InvoiceProducts {
  id               Int       @id @default(autoincrement())
  invoiceId        Int
  productId        Int
  cantidad         Int       @default(1) // Cantidad vendida
  costo            Float     // Costo unitario
  precio           Float     // Precio unitario
  invoice          Invoice   @relation(fields: [invoiceId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])
}

enum EstadoFactura {
  FACTURADO
  ANULADO
}

model Turno {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  horaInicio  DateTime @default(now())
  horaFin     DateTime?
  estado      EstadoTurno
  invoices    Invoice[]
}

enum EstadoTurno {
  PENDIENTE
  CERRADO
}
